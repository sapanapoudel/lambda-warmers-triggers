/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lambda.warmers.triggers;

import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import lambda.warmers.triggers.model.History;
import lambda.warmers.triggers.model.Task;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Library {
    private DynamoDB dynamoDb;
    private String DYNAMODB_TABLE_NAME = "task";
    private Regions REGION = Regions.US_WEST_2;


//Create Task
    public Task create(Task task) {

        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        task = new Task(task.getId(), task.getTitle(), task.getDescription(), task.getAssignee());
        History history = new History("task is assigned to: " + task.getAssignee());
        if(task.getId() != null) {
            task = ddbMapper.load(Task.class, task.getId());
            List<History> previousHistory = task.getHistoryList();
            previousHistory.add(history);
            task.setHistoryList(previousHistory);
        }
        task.getHistoryList().add(history);
        ddbMapper.save(task);

        return task;
    }

    //Get all the tasks
    public List<Task> getAllTasks(Task task) {

        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        List<Task> tasks = ddbMapper.scan(Task.class, new DynamoDBScanExpression());
        return tasks;
    }
    
    //Get task for a user
    public List<Task> getUserTask(APIGatewayProxyRequestEvent event){
        StringBuilder path = new StringBuilder();
        for (Map.Entry<String,String> entry : event.getPathParameters().entrySet())
            path.append(entry.getValue());

        HashMap<String, AttributeValue> expressionAttributeValues =
                new HashMap<String, AttributeValue>();
        expressionAttributeValues.put(":v1", new AttributeValue().withS(path.toString()));

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
                .withFilterExpression("assignee = :v1")
                .withExpressionAttributeValues(expressionAttributeValues);


        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        List<Task> tasks = ddbMapper.scan(Task.class, scanExpression);
        return tasks;
    }


//Update the state (pass task id as param)
    public Task updateState(Task task) {
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task t =  ddbMapper.load(Task.class, task.getId());
        String status = t.getStatus();
        String date = new Date().toString();
        History history = new History("task is assigned to: " + t.getAssignee());
        if(status.equals("available")){
            t.setStatus("assigned");
        }else if(status.equals("assigned")){
            t.setStatus("accepted");
        }else if(status.equals("accepted")){
            t.setStatus("finished");
        }
        t.getHistoryList().add(history);
        ddbMapper.save(t);
        return t;
    }

    //Update assignee (pass the assignee as param)
    public Task updateAssignee(Task task) {
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        Task t = ddbMapper.load(Task.class, task.getId());
        String assignee = task.getAssignee();
        t.setAssignee(assignee);
        t.setStatus("assigned");
        History history = new History("task is assigned to: " + t.getAssignee());
        t.getHistoryList().add(history);
        ddbMapper.save(t);
        return t;
    }

    //Delete task
    public Task delete(Task task) {
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);
        Task t = ddbMapper.load(Task.class, task.getId());
        ddbMapper.delete(t);
        return t;
    }

}

